{"version":3,"sources":["webpack:///./node_modules/rxjs-compat/_esm5/add/operator/catch.js","webpack:///./node_modules/rxjs-compat/_esm5/add/operator/map.js","webpack:///./node_modules/rxjs-compat/_esm5/operator/catch.js","webpack:///./node_modules/rxjs-compat/_esm5/operator/map.js","webpack:///./src/app/layout/patientreg/patientreg-routing.module.ts","webpack:///./src/app/layout/patientreg/patientreg.component.css","webpack:///./src/app/layout/patientreg/patientreg.component.html","webpack:///./src/app/layout/patientreg/patientreg.component.ts","webpack:///./src/app/layout/patientreg/patientreg.module.ts","webpack:///./src/app/service/patient.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAkC;AACY;AAC9C,+CAAU,mBAAmB,sDAAM;AACnC,+CAAU,oBAAoB,sDAAM;AACpC,iC;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAkC;AACO;AACzC,+CAAU,iBAAiB,iDAAG;AAC9B,+B;;;;;;;;;;;;ACHA;AAAA;AAAA;AAA2D;AACpD;AACP,WAAW,iEAAW;AACtB;AACA,iC;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAuD;AAChD;AACP,WAAW,0DAAc;AACzB;AACA,+B;;;;;;;;;;;;;;;;;;;;;;;ACJyC;AACc;AACM;AAG7D,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,yEAAmB;KACzC;CACF,CAAC;AAMF;IAAA;IAAuC,CAAC;IAA3B,uBAAuB;QAJnC,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,uBAAuB,CAAI;IAAD,8BAAC;CAAA;AAAJ;;;;;;;;;;;;ACfpC,oCAAoC,iBAAiB,kBAAkB,KAAK,sBAAsB,iBAAiB,kBAAkB,KAAK,4BAA4B,kBAAkB,KAAK,oBAAoB,gBAAgB,wBAAwB,KAAK,UAAU,kBAAkB,KAAK,aAAa,qBAAqB,MAAM,6EAA6E,sBAAsB,KAAK,WAAW,kBAAkB,KAAK,eAAe,kBAAkB,KAAK,qBAAqB,iBAAiB,oBAAoB,gCAAgC,yBAAyB,uBAAuB,KAAK,sBAAsB,wBAAwB,KAAK,mBAAmB,iBAAiB,wBAAwB,yBAAyB,qBAAqB,KAAK,yCAAyC,yBAAyB,KAAK,gBAAgB,uBAAuB,0BAA0B,0BAA0B,sBAAsB,KAAK,gBAAgB,iCAAiC,oBAAoB,wBAAwB,8BAA8B,uBAAuB,gBAAgB,KAAK,eAAe,sBAAsB,0BAA0B,KAAK,C;;;;;;;;;;;ACAhtC,qtDAAqtD,sBAAsB,2mNAA2mN,s8EAAs8E,kBAAkB,obAAob,cAAc,0bAA0b,gBAAgB,wbAAwb,gBAAgB,kSAAkS,2BAA2B,6R;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAn4Y;AAKG;AACc;AACI;AACN;AAElC;AAgBzC,IAAM,YAAY,GAAsB;IACtC,EAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,iBAAiB,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,WAAW,EAAC;IAC/E,EAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,WAAW,EAAC;CAE7E,CAAC;AAEF;IAAA;IAGA,CAAC;IAAD,kBAAC;AAAD,CAAC;;AASD;IA8BE,6BAAoB,cAA6B,EAAS,OAA6B,EAAQ,MAAiB;QAC9G;;;;;;YAMI;QAPc,mBAAc,GAAd,cAAc,CAAe;QAAS,YAAO,GAAP,OAAO,CAAsB;QAAQ,WAAM,GAAN,MAAM,CAAW;QA3BhH,yBAAoB,GAAW,IAAI,CAAC;QACpC,iBAAY,GAAW,KAAK,CAAC;QAE7B,qBAAgB,GAAa,CAAC,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACtE,eAAU,GAAG,YAAY,CAAC;QAE1B,aAAQ,GAAG,KAAK,CAAC;QACjB,wBAAmB,GAAG,KAAK,CAAC;QAEnB,eAAU,GAAmB,EAAE,CAAC;QAEzC,oCAAoC;QAEpC,gBAAW,GAAU,EAAE,CAAC;QACxB,kBAAa,GAAU,EAAE,CAAC;QAE1B,oBAAe,GAAU,EAAE,CAAC;QAC5B,gBAAW,GAAU,EAAE,CAAC;QACxB,oBAAe,GAAU,EAAE,CAAC;QAC5B,kBAAa,GAAU,EAAE,CAAC;QAC1B,sBAAiB,GAAU,EAAE,CAAC;QAC9B,qBAAgB,GAAU,EAAE,CAAC;QAC7B,kBAAa,GAAU,EAAE,CAAC;QAoC1B,SAAI,GAAG,IAAI,0DAAW,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;QACnC,mBAAc,GAAG,IAAI,0DAAW,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;QAC7D,gBAAW,GAAG,IAAI,0DAAW,EAAE,CAAC;QAEhC;;;;;;;;;;;;;;;;;;;;;;;;;;;QA2BA;QACA,kBAAa,GAAG,EAAE,CAAC;QAGlB,aAAQ,GAAG,IAAI,CAAC;QAzDd,IAAI,CAAC,cAAc,GAAG,IAAI,wDAAS,CAAC;YAC/B,iBAAiB,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;YACtC,YAAY,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;YACjC,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;YAC5B,UAAU,EAAG,IAAI,0DAAW,CAAC,EAAE,CAAC;YAChC,eAAe,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;YACpC,SAAS,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;YAC9B,WAAW,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;YAChC,aAAa,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;YAClC,UAAU,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;YAC/B,eAAe,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;YACpC,WAAW,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;YAChC,eAAe,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;YACpC,aAAa,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;YAClC,iBAAiB,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;YACtC,gBAAgB,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;YACrC,aAAa,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;SACtC,CAAC,CAAC;IAEL,CAAC;IAuCJ;;;;;;MAME;IAIA,iDAAmB,GAAnB,UAAoB,KAAK;QAEvB,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;QAE/B,IAAG,IAAI,CAAC,QAAQ,IAAE,IAAI,EAAC;YACrB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;SACjC;aACG;YACF,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;SAClC;IAIL,CAAC;IAKC,sCAAQ,GAAR;QACE,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,KAAK,GAAG,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QACtE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,uCAAuC;IAC5E,CAAC;IACO,yCAAW,GAAnB;QAAA,iBAOC;QANC,IAAI,OAAO,CAAC;QACZ,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,CAAC,SAAS,CAAC,UAAC,IAAoB;YACnE,OAAO,GAAI,IAAI,CAAC;YAChB,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;IAGD,6CAAe,GAAf;QAAA,iBAWC;QAVC,IAAI,OAAO,CAAC;QACZ,IAAI,UAAU,CAAC;QACf,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,cAAI;YAC5C,OAAO,GAAG,IAAI,CAAC;YACf,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC;YAC7B,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACtC,CAAC,EACD,eAAK;YACJ,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACJ,CAAC;IAGD,8CAAgB,GAAhB,UAAiB,OAAO;QACtB,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC;YAC7B,YAAY,EAAE,OAAO,CAAC,UAAU;YAChC,WAAW,EAAE,OAAO,CAAC,YAAY;YACjC,aAAa,EAAE,OAAO,CAAC,MAAM;YAC9B,mCAAmC;YAClC,eAAe,EAAE,OAAO,CAAC,WAAW;YACpC,WAAW,EAAE,OAAO,CAAC,YAAY;YAClC,wCAAwC;YACvC,aAAa,EAAE,OAAO,CAAC,WAAW;YAClC,iBAAiB,EAAE,OAAO,CAAC,eAAe;YAC1C,gBAAgB,EAAE,OAAO,CAAC,cAAc;YACxC,aAAa,EAAE,OAAO,CAAC,MAAM;SAC9B,CAAC,CAAC;IAEL,CAAC;IAED,mDAAqB,GAArB,UAAsB,KAAa;QACjC,IAAG;YACC,OAAO,uCAAU,CAAC,KAAK,CAAC,CAAC;SAC5B;QACD,OAAM,KAAK,EAAC;YACR,OAAO,IAAI,CAAC;SACf;IACH,CAAC;IAED,sCAAQ,GAAR;QAAA,iBAqBC;QAnBC,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;QAClC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAEzB,IAAI,QAAQ,CAAC;QACb,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,cAAI;YACtE,QAAQ,GAAG,IAAI,CAAC;YAChB,IAAG,QAAQ,CAAC,UAAU,IAAE,GAAG,EAAC;aAE3B;iBACG;gBACF,KAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;gBACjC,KAAI,CAAC,YAAY,GAAG,KAAK,CAAC;aAC3B;QACF,CAAC,EACC,eAAK;YACH,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IAEN,CAAC;IA1MU,mBAAmB;QAP/B,+DAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;;;SAG3B,CAAC;yCAiCmC,uEAAc,EAAiB,qFAAqB,EAAgB,2DAAS;OA9BrG,mBAAmB,CA+M/B;IAAD,0BAAC;CAAA;AA/M+B;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CS;AACM;AAEuB;AACT;AACc;AACT;AAoBlE;IAAA;IAAgC,CAAC;IAApB,gBAAgB;QAZ5B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,kFAAuB;gBACvB,mFAAiB;gBACjB,0DAAW;gBACX,kEAAmB;aAEpB;YAED,YAAY,EAAE,CAAC,yEAAmB,CAAC;SACpC,CAAC;OACW,gBAAgB,CAAI;IAAD,uBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1Bc;AACO;AACe;AAGhC;AACF;AAG/B;IAAA;IAGA,CAAC;IAAD,kBAAC;AAAD,CAAC;;AAKD;IAEE,wBAAmB,IAAgB,EAAS,MAA4B;QAArD,SAAI,GAAJ,IAAI,CAAY;QAAS,WAAM,GAAN,MAAM,CAAsB;IAEvE,CAAC;IACD,0CAAiB,GAAjB;QACC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAC9C,CAAC;IAGD,uCAAc,GAAd;QAAA,iBAWC;QARE,OAAO,IAAI,OAAO,CAAC,iBAAO;YACvB,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,cAAI;gBACnD,OAAO,CAAC,IAAI,CAAC,CAAC;YAEhB,CAAC,EAAE,aAAG;gBACJ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,wCAAe,GAAf,UAAgB,UAAU;QAA1B,iBAWC;QAVC,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,EAAC,WAAW,EAAE,UAAU,EAAC,CAAC,CAAC;QACtD,OAAO,IAAI,OAAO,CAAC,iBAAO;YACvB,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,WAAW,EAAC,MAAM,CAAC,CAAC,SAAS,CAAC,cAAI;gBAC3D,OAAO,CAAC,IAAI,CAAC,CAAC;YAEhB,CAAC,EAAE,aAAG;gBACJ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IAEP,CAAC;IAED,6CAAoB,GAApB,UAAqB,SAAS;QAA9B,iBAYC;QAXC,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC,+CAA+C;QACnE,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,EAAC,WAAW,EAAE,UAAU,EAAC,UAAU,EAAC,SAAS,EAAC,CAAC,CAAC;QAC3E,OAAO,IAAI,OAAO,CAAC,iBAAO;YACvB,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,iBAAiB,EAAC,MAAM,CAAC,CAAC,SAAS,CAAC,cAAI;gBACjE,OAAO,CAAC,IAAI,CAAC,CAAC;YAEhB,CAAC,EAAE,aAAG;gBACJ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IAEP,CAAC;IAED,yCAAgB,GAAhB,UAAiB,KAAK;QAAtB,iBAWC;QAVC,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC;QAC3C,OAAO,IAAI,OAAO,CAAC,iBAAO;YACvB,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,0BAA0B,EAAC,MAAM,CAAC,CAAC,SAAS,CAAC,cAAI;gBAC1E,OAAO,CAAC,IAAI,CAAC,CAAC;YAEhB,CAAC,EAAE,aAAG;gBACJ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IAEP,CAAC;IAID,wCAAe,GAAf,UAAgB,SAAS;QAAzB,iBAWC;QAVC,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC,+CAA+C;QACnE,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,EAAC,WAAW,EAAE,UAAU,EAAC,MAAM,EAAC,SAAS,EAAC,CAAC,CAAC;QACvE,OAAO,IAAI,OAAO,CAAC,iBAAO;YACvB,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,mBAAmB,EAAC,MAAM,CAAC,CAAC,SAAS,CAAC,cAAI;gBACnE,OAAO,CAAC,IAAI,CAAC,CAAC;YAEhB,CAAC,EAAE,aAAG;gBACJ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sCAAa,GAAb,UAAc,SAAS;QAAvB,iBAWC;QATC,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,EAAC,MAAM,EAAC,SAAS,EAAC,CAAC,CAAC;QAC/C,OAAO,IAAI,OAAO,CAAC,iBAAO;YACvB,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,iBAAiB,EAAC,MAAM,CAAC,CAAC,SAAS,CAAC,cAAI;gBACjE,OAAO,CAAC,IAAI,CAAC,CAAC;YAEhB,CAAC,EAAE,aAAG;gBACJ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sCAAa,GAAb,UAAc,SAAS,EAAC,UAAU;QAAlC,iBAUC;QATC,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC,+CAA+C;QACnE,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,EAAC,WAAW,EAAE,UAAU,EAAC,MAAM,EAAC,SAAS,EAAC,KAAK,EAAC,UAAU,EAAC,CAAC,CAAC;QACxF,OAAO,IAAI,OAAO,CAAC,iBAAO;YACvB,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,iBAAiB,EAAC,MAAM,CAAC,CAAC,SAAS,CAAC,cAAI;gBACjE,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,EAAE,aAAG;gBACJ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAGD,+CAAsB,GAAtB,UAAuB,SAAS,EAAC,UAAU;QAA3C,iBAUC;QATC,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,EAAC,MAAM,EAAC,SAAS,EAAC,KAAK,EAAC,UAAU,EAAC,CAAC,CAAC;QACjE,OAAO,IAAI,OAAO,CAAC,iBAAO;YACvB,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,oBAAoB,EAAC,MAAM,CAAC,CAAC,SAAS,CAAC,cAAI;gBACpE,OAAO,CAAC,IAAI,CAAC,CAAC;YAEhB,CAAC,EAAE,aAAG;gBACJ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACN,CAAC;IAGD,6CAAoB,GAApB,UAAqB,KAAK;QAA1B,iBAWC;QAVC,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC;QAC3C,OAAO,IAAI,OAAO,CAAC,iBAAO;YACvB,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,qBAAqB,EAAC,MAAM,CAAC,CAAC,SAAS,CAAC,cAAI;gBACrE,OAAO,CAAC,IAAI,CAAC,CAAC;YAEhB,CAAC,EAAE,aAAG;gBACJ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IAEP,CAAC;IAhIQ,cAAc;QAH1B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAGyB,+DAAU,EAAgB,6EAAqB;OAF7D,cAAc,CAmI1B;IAAD,qBAAC;CAAA;AAnI0B","file":"patientreg-patientreg-module.js","sourcesContent":["import { Observable } from 'rxjs';\nimport { _catch } from '../../operator/catch';\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n//# sourceMappingURL=catch.js.map","import { Observable } from 'rxjs';\nimport { map } from '../../operator/map';\nObservable.prototype.map = map;\n//# sourceMappingURL=map.js.map","import { catchError as higherOrder } from 'rxjs/operators';\nexport function _catch(selector) {\n    return higherOrder(selector)(this);\n}\n//# sourceMappingURL=catch.js.map","import { map as higherOrderMap } from 'rxjs/operators';\nexport function map(project, thisArg) {\n    return higherOrderMap(project, thisArg)(this);\n}\n//# sourceMappingURL=map.js.map","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { PatientregComponent } from './patientreg.component';\n\n\nconst routes: Routes = [\n  {\n    path: '', component: PatientregComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class PatientregRoutingModule { }\n","module.exports = \"/*.patientregcard{\\r\\n  width: 60%;\\r\\n  float: left;\\r\\n}\\r\\n.biometricregcard{\\r\\n  width: 30%;\\r\\n  float: left;\\r\\n}\\r\\n*/\\r\\n#patientRegSearch{\\r\\n  margin:2% 0;\\r\\n}\\r\\n.halfwidthInput{\\r\\n  width:40%;\\r\\n  margin-right:15px;\\r\\n}\\r\\n.crow{\\r\\nmargin-top:1%;\\r\\n}\\r\\n.cfinput{\\r\\nmargin-right:5px; \\r\\n}\\r\\n.mat-card-content, .mat-card-header .mat-card-title, .mat-card-subtitle {\\r\\n  font-size: 13px;\\r\\n}\\r\\ntable {\\r\\n  width: 100%;\\r\\n}\\r\\n.margingap{\\r\\n  margin:1% 0;\\r\\n}\\r\\n.customforminput{\\r\\n  width: 90%;\\r\\n  padding: 2.5%;\\r\\n  border: 1px solid #e6e0e0;\\r\\n  border-radius: 4px;\\r\\n  text-indent: 5px;\\r\\n}\\r\\n.mat-card-actions{\\r\\n  text-align:center;\\r\\n}\\r\\n.biometric_img{\\r\\n  width: 30%;\\r\\n  margin-left: auto;\\r\\n  margin-right: auto;\\r\\n  display: block;\\r\\n}\\r\\n.biometricregcard > mat-card-actions{\\r\\n  text-align: center;\\r\\n}\\r\\n.card_title{\\r\\n  font-weight: 400;\\r\\n  letter-spacing: 1px;\\r\\n  font-family: Roboto;\\r\\n  font-size: 15px;\\r\\n}\\r\\nmat-toolbar{\\r\\npadding: 7px 10px !important;\\r\\nfont-size: 13px;\\r\\nletter-spacing: 1px;\\r\\nborder: 1px solid #d7d7d7;\\r\\nborder-radius: 3px;\\r\\nheight:auto;\\r\\n}\\r\\nmat-option{\\r\\n  font-size: 13px;\\r\\n  letter-spacing: 1px;\\r\\n}\"","module.exports = \"<div class=\\\"container\\\" fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutWrap fxLayoutGap=\\\"1.5%\\\" fxLayoutAlign=\\\"center\\\">\\r\\n    <div class=\\\"searchandregBlock\\\" fxFlex=\\\"60%\\\">\\r\\n\\r\\n            <mat-card class=\\\"patientregcard\\\">\\r\\n                    <mat-card-header>\\r\\n                        <div mat-card-avatar>\\r\\n                            <mat-icon>perm_contact_calendar</mat-icon>\\r\\n                        </div>\\r\\n                        <mat-card-title class=\\\"card_title\\\">OPD Registration</mat-card-title>\\r\\n                    </mat-card-header>\\r\\n                    \\r\\n                     <mat-card-content>\\r\\n                        <form [formGroup]=\\\"patientRegForm\\\" class=\\\"patientRegFormCls\\\" novalidate (ngSubmit)=\\\"onSubmit(patientRegForm.value)\\\">\\r\\n                                <mat-toolbar> Search  Patients</mat-toolbar>\\r\\n                \\r\\n                            <section id=\\\"patientRegSearch\\\">\\r\\n                               \\r\\n                               <mat-form-field class=\\\"halfwidthInput\\\">\\r\\n                                    <input matInput placeholder=\\\"Search Patient ID\\\" aria-label=\\\"employee\\\" [matAutocomplete]=\\\"auto\\\"\\r\\n                                    formControlName=\\\"searchpatientCtrl\\\" >\\r\\n                                    <input type=\\\"hidden\\\" formControlName=\\\"hdnPatientID\\\" >\\r\\n                                    <mat-autocomplete #auto=\\\"matAutocomplete\\\" [displayWith]=\\\"AutoCompleteDisplay\\\">\\r\\n                                        <mat-option *ngFor=\\\"let patient of listofPatient[0] \\\" [value]=\\\"patient.patient_code\\\" (click)=\\\"getPatientDetail(patient)\\\">\\r\\n                                            <span>{{patient.patient_code}}</span>\\r\\n                                        </mat-option>\\r\\n                                    </mat-autocomplete>\\r\\n                                </mat-form-field>\\r\\n                                \\r\\n                                <mat-form-field  class=\\\"halfwidthInput\\\">\\r\\n                                        <input matInput [matDatepicker]=\\\"picker1\\\" placeholder=\\\"Registration Date\\\"  formControlName=\\\"regdate\\\" >\\r\\n                                        <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\r\\n                                        <mat-datepicker #picker1></mat-datepicker>\\r\\n                                    </mat-form-field>\\r\\n                \\r\\n                                <mat-checkbox (change)=\\\"enableAdvanceSearch($event)\\\" >Enable Advance Search</mat-checkbox>\\r\\n                \\r\\n                                <p *ngIf=\\\"enableAdvancesearch\\\">\\r\\n                                    <mat-form-field appearance=\\\"outline\\\" class=\\\"cfinput\\\">\\r\\n                                        <mat-label>Name</mat-label>\\r\\n                                        <input matInput placeholder=\\\"\\\" formControlName=\\\"patienname\\\">\\r\\n                                    </mat-form-field>\\r\\n                                  \\r\\n                                    <mat-form-field appearance=\\\"outline\\\" class=\\\"cfinput\\\">\\r\\n                                        <mat-label>Mobile No</mat-label>\\r\\n                                        <input matInput placeholder=\\\"\\\" formControlName=\\\"patientmobileno\\\">\\r\\n                                    </mat-form-field>\\r\\n\\r\\n                                    <mat-form-field appearance=\\\"outline\\\" class=\\\"cfinput\\\">\\r\\n                                            <mat-label>Patient ID</mat-label>\\r\\n                                            <input matInput placeholder=\\\"\\\" formControlName=\\\"patientid\\\">\\r\\n                                    </mat-form-field>\\r\\n                                    <button mat-mini-fab color=\\\"primary\\\"> <mat-icon>search</mat-icon> </button>\\r\\n                \\r\\n                                </p>\\r\\n                \\r\\n                \\r\\n                               \\r\\n                            </section>\\r\\n                            <!--end of patient registration search-->\\r\\n                \\r\\n                \\r\\n                            <section id=\\\"patientInfo\\\">\\r\\n                                    <mat-toolbar> Patient Information</mat-toolbar>\\r\\n                                    <div class=\\\"margingap\\\"></div>\\r\\n                                <div class=\\\"container crow\\\" fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutWrap fxLayoutGap=\\\"1.5%\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                                        <div fxFlex=\\\"33%\\\">\\r\\n                                           <input type=\\\"text\\\" placeholder=\\\"Name\\\" class=\\\"customforminput\\\" formControlName=\\\"patientName\\\" />\\r\\n                                        </div>\\r\\n                                        <div fxFlex=\\\"33%\\\">\\r\\n                                            <input type=\\\"text\\\" placeholder=\\\"Gender\\\" class=\\\"customforminput\\\"  formControlName=\\\"patientGender\\\" />\\r\\n                                        </div>\\r\\n                                        <div fxFlex=\\\"33%\\\">\\r\\n                                            <input type=\\\"text\\\" placeholder=\\\"DOB\\\" class=\\\"customforminput\\\"  formControlName=\\\"patientDOB\\\" />\\r\\n                                        </div>\\r\\n                                </div>\\r\\n\\r\\n                                <div class=\\\"container crow\\\" fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutWrap fxLayoutGap=\\\"1.5%\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                                    <div fxFlex=\\\"33%\\\">\\r\\n                                       <input type=\\\"text\\\" placeholder=\\\"Blood Group\\\" class=\\\"customforminput\\\"  formControlName=\\\"patientBloodGrp\\\" />\\r\\n                                    </div>\\r\\n                                    <div fxFlex=\\\"33%\\\">\\r\\n                                        <input type=\\\"text\\\" placeholder=\\\"Patient Type\\\" class=\\\"customforminput\\\"  formControlName=\\\"patientType\\\" />\\r\\n                                    </div>\\r\\n                                    <div fxFlex=\\\"33%\\\">\\r\\n                                        <input type=\\\"text\\\" placeholder=\\\"Relation\\\" class=\\\"customforminput\\\"  formControlName=\\\"patientRelation\\\" />\\r\\n                                    </div>\\r\\n                                </div>\\r\\n\\r\\n                                <div class=\\\"container crow\\\" fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutWrap fxLayoutGap=\\\"1.5%\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                                    <div fxFlex=\\\"33%\\\">\\r\\n                                       <input type=\\\"text\\\" placeholder=\\\"Line Number\\\" class=\\\"customforminput\\\"  formControlName=\\\"patientLineNo\\\" />\\r\\n                                    </div>\\r\\n                                    <div fxFlex=\\\"33%\\\">\\r\\n                                        <input type=\\\"text\\\" placeholder=\\\"Division Number\\\" class=\\\"customforminput\\\"  formControlName=\\\"patientDivisionNo\\\" />\\r\\n                                    </div>\\r\\n                                    <div fxFlex=\\\"33%\\\">\\r\\n                                        <input type=\\\"text\\\" placeholder=\\\"Challan Number\\\" class=\\\"customforminput\\\"  formControlName=\\\"patientChallanNo\\\" />\\r\\n                                    </div>\\r\\n                                </div>\\r\\n\\r\\n                                <div class=\\\"container crow\\\" fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxLayoutWrap fxLayoutGap=\\\"1.5%\\\" fxLayoutAlign=\\\"center\\\">\\r\\n                                    <div fxFlex=\\\"33%\\\">\\r\\n                                       <input type=\\\"text\\\" placeholder=\\\"Estate\\\" class=\\\"customforminput\\\"  formControlName=\\\"patientEstate\\\" />\\r\\n                                    </div>\\r\\n                                    <div fxFlex=\\\"33%\\\">\\r\\n                                       \\r\\n                                     </div>\\r\\n                                     <div fxFlex=\\\"33%\\\">\\r\\n                                       \\r\\n                                     </div>\\r\\n                                    \\r\\n                                </div>\\r\\n                            </section>\\r\\n                            <mat-card-actions>\\r\\n                                    <button mat-raised-button color=\\\"primary\\\" *ngIf=\\\"registerButtonActive\\\">Register</button>\\r\\n                                    <mat-spinner [diameter]=\\\"25\\\" style=\\\"margin:0 auto;\\\" *ngIf=\\\"loaderActive\\\"></mat-spinner>\\r\\n                            </mat-card-actions>\\r\\n                        </form>\\r\\n                \\r\\n                \\r\\n                        \\r\\n                    </mat-card-content>\\r\\n                </mat-card>\\r\\n\\r\\n    </div> <!-- end of searchandregBlock-->\\r\\n    <div class=\\\"listBlock\\\" fxFlex=\\\"36%\\\">\\r\\n\\r\\n            <mat-card class=\\\"biometricregcard\\\">\\r\\n                    <mat-card-header>\\r\\n                        <div mat-card-avatar>\\r\\n                            <mat-icon>perm_contact_calendar</mat-icon>\\r\\n                        </div>\\r\\n                        <mat-card-title class=\\\"card_title\\\">Biometric Registration</mat-card-title>\\r\\n                    </mat-card-header>\\r\\n                \\r\\n                  <mat-card-content>\\r\\n                        <img src=\\\"assets/fingerprint_scan.png\\\" alt=\\\"image\\\" class=\\\"biometric_img\\\">\\r\\n                    </mat-card-content>\\r\\n                    <mat-card-actions>\\r\\n                        <button mat-raised-button color=\\\"primary\\\" >Scan & Register</button>\\r\\n                     </mat-card-actions>\\r\\n                    \\r\\n                </mat-card>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n                <mat-card class=\\\"biometricregcard\\\">\\r\\n                    <mat-card-header>\\r\\n                        <div mat-card-avatar>\\r\\n                            <mat-icon>perm_contact_calendar</mat-icon>\\r\\n                        </div>\\r\\n                        <mat-card-title class=\\\"card_title\\\">Today's Registration</mat-card-title>\\r\\n                    </mat-card-header>\\r\\n                \\r\\n                  <mat-card-content>\\r\\n                        <section id=\\\"patientRegLists\\\">\\r\\n                                <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\r\\n                \\r\\n                                        <!--- Note that these columns can be defined in any order.\\r\\n                                              The actual rendered columns are set as a property on the row definition\\\" -->\\r\\n                                      \\r\\n                                        <!-- Position Column -->\\r\\n                                        <ng-container matColumnDef=\\\"position\\\">\\r\\n                                          <th mat-header-cell *matHeaderCellDef> No. </th>\\r\\n                                          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </td>\\r\\n                                        </ng-container>\\r\\n                                      \\r\\n                                        <!-- Name Column -->\\r\\n                                        <ng-container matColumnDef=\\\"name\\\">\\r\\n                                          <th mat-header-cell *matHeaderCellDef> Name </th>\\r\\n                                          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\r\\n                                        </ng-container>\\r\\n                                      \\r\\n                                        <!-- Weight Column -->\\r\\n                                        <ng-container matColumnDef=\\\"weight\\\">\\r\\n                                          <th mat-header-cell *matHeaderCellDef> Mobile </th>\\r\\n                                          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.weight}} </td>\\r\\n                                        </ng-container>\\r\\n                                      \\r\\n                                        <!-- Symbol Column -->\\r\\n                                        <ng-container matColumnDef=\\\"symbol\\\">\\r\\n                                          <th mat-header-cell *matHeaderCellDef> Type </th>\\r\\n                                          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.symbol}} </td>\\r\\n                                        </ng-container>\\r\\n                                      \\r\\n                                        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n                                        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                                      </table>\\r\\n                                      \\r\\n                        </section>\\r\\n                    </mat-card-content>\\r\\n                    \\r\\n                </mat-card>\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","import { Component, OnInit ,ViewChild} from '@angular/core';\r\n\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\nimport {MatPaginator, MatSort, MatTableDataSource} from '@angular/material';\r\nimport { PatientService } from '../../service/patient.service';\r\nimport { GlobalconstantService } from '../../service/globalconstant.service';\r\nimport { Validators, FormBuilder, FormGroup, FormControl } from '@angular/forms';\r\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material';\r\n\r\nimport * as jwt_decode from \"jwt-decode\";\r\n\r\n\r\n\r\nexport interface Patient {\r\n \r\n  name: string;\r\n  emplcode: string;\r\n} \r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  position: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\nconst ELEMENT_DATA: PeriodicElement[] = [\r\n  {position: 1, name: 'Mithilesh Routh', weight: 1236547891, symbol: 'Permanent'},\r\n  {position: 2, name: 'Aayush Kumar', weight: 3214587965, symbol: 'Dependent'},\r\n  \r\n];\r\n\r\nexport class PatientsCls {\r\n  public patient_name: string;\r\n  public patient_code: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-patientreg',\r\n  templateUrl: './patientreg.component.html',\r\n  styleUrls: ['./patientreg.component.css']\r\n})\r\n\r\n\r\nexport class PatientregComponent implements OnInit {\r\n\r\n  patientRegForm: FormGroup;\r\n  registerButtonActive:boolean = true;\r\n  loaderActive:boolean = false;\r\n\r\n  displayedColumns: string[] = ['position', 'name', 'weight', 'symbol'];\r\n  dataSource = ELEMENT_DATA;\r\n\r\n  isCheked = false;\r\n  enableAdvancesearch = false;\r\n\r\n  private  patientlst:  Array<object> = [];\r\n\r\n  // patient detail info initilization\r\n\r\n  patientName:string = \"\";\r\n  patientGender:string = \"\";\r\n  patientDOB:Date;\r\n  patientBloodGrp:string = \"\";\r\n  patientType:string = \"\";\r\n  patientRelation:string = \"\";\r\n  patientLineNo:string = \"\";\r\n  patientDivisionNo:string = \"\";\r\n  patientChallanNo:string = \"\";\r\n  patientEstate:string = \"\";\r\n  \r\n\r\n\r\n\r\n  constructor(private patientService:PatientService,private _global:GlobalconstantService,public dialog: MatDialog) {\r\n    /*\r\n    this.filteredStates = this.patientCtrl.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map(patient => patient ? this._filterStates(patient) : this.patients.slice())\r\n      );\r\n      */\r\n\r\n     this.patientRegForm = new FormGroup({\r\n          searchpatientCtrl: new FormControl(''),\r\n          hdnPatientID: new FormControl(''),\r\n          regdate: new FormControl(''),\r\n          patienname : new FormControl(''),\r\n          patientmobileno: new FormControl(''),\r\n          patientid: new FormControl(''),\r\n          patientName: new FormControl(''),\r\n          patientGender: new FormControl(''),\r\n          patientDOB: new FormControl(''),\r\n          patientBloodGrp: new FormControl(''),\r\n          patientType: new FormControl(''),\r\n          patientRelation: new FormControl(''),\r\n          patientLineNo: new FormControl(''),\r\n          patientDivisionNo: new FormControl(''),\r\n          patientChallanNo: new FormControl(''),\r\n          patientEstate: new FormControl('')\r\n     });\r\n\r\n   }\r\n  \r\n\r\n  date = new FormControl(new Date());\r\n  serializedDate = new FormControl((new Date()).toISOString());\r\n  patientCtrl = new FormControl();\r\n\r\n  /*\r\n  filteredStates: Observable<Patient[]>;\r\n\r\n  patients: Patient[] = [\r\n    {\r\n      name: 'Mithilesh Routh',\r\n      emplcode: 'E0001',\r\n     \r\n    \r\n    },\r\n    {\r\n      name: 'Abhik Ghosh',\r\n      emplcode: 'E0001/SO',\r\n    \r\n    },\r\n    {\r\n      name: 'Shibu Sankar',\r\n      emplcode: 'E0002',\r\n     \r\n    \r\n    },\r\n    {\r\n      name: 'Suman Mukherjee ',\r\n      emplcode: 'E0003',\r\n     \r\n    }\r\n  ];\r\n*/\r\n  listofPatient = [];\r\n \r\n   patientLst: string[];\r\n   selected = null;\r\n/*\r\n   private _filterStates(value: string): Patient[] {\r\n    const filterValue = value.toLowerCase();\r\n\r\n    return this.patients.filter(patient => patient.name.toLowerCase().indexOf(filterValue) === 0);\r\n  }\r\n*/\r\n\r\n\r\n \r\n  enableAdvanceSearch(event) {\r\n\r\n    this.isCheked = !this.isCheked;\r\n\r\n    if(this.isCheked==true){\r\n      this.enableAdvancesearch = true;\r\n    }\r\n    else{\r\n      this.enableAdvancesearch = false;\r\n    }\r\n\r\n  \r\n\r\n}\r\n\r\n\r\n\r\n\r\n  ngOnInit() {\r\n    this.getPatientLists();\r\n    this.getContacts();\r\n    let token = this.getDecodedAccessToken(localStorage.getItem(\"token\"));\r\n    console.log(token.data.user_name); // show decoded token object in console\r\n  }\r\n  public  getContacts(){\r\n    let patient;\r\n    this.patientService.GetPatientListAll().subscribe((data:  Array<object>) => {\r\n        patient =  data;\r\n        this.patientlst.push(data);\r\n        console.log(data);\r\n    });\r\n  }\r\n\r\n\r\n  getPatientLists(){\r\n    let dataval;\r\n    let patiendata;\r\n    this.patientService.getPatientList().then(data => {\r\n      dataval = data;\r\n      patiendata = dataval.patient;\r\n      this.listofPatient.push(patiendata);\r\n    },\r\n    error => {\r\n     console.log(\"There is some error in Patient list...\");\r\n   });\r\n  }\r\n\r\n\r\n  getPatientDetail(patient){\r\n    this.patientRegForm.patchValue({\r\n      hdnPatientID: patient.patient_id,\r\n      patientName: patient.patient_name,\r\n      patientGender: patient.gender,\r\n     // patientDOB: new FormControl(''),\r\n      patientBloodGrp: patient.blood_group,\r\n      patientType: patient.patient_type,\r\n     // patientRelation: new FormControl(''),\r\n      patientLineNo: patient.line_number,\r\n      patientDivisionNo: patient.division_number,\r\n      patientChallanNo: patient.challan_number,\r\n      patientEstate: patient.Estate\r\n    });\r\n\r\n  }\r\n\r\n  getDecodedAccessToken(token: string): any {\r\n    try{\r\n        return jwt_decode(token);\r\n    }\r\n    catch(Error){\r\n        return null;\r\n    }\r\n  }\r\n\r\n  onSubmit(){\r\n\r\n    this.registerButtonActive = false;\r\n    this.loaderActive = true;\r\n\r\n    let response;\r\n    console.log(this.patientRegForm.value);\r\n    this.patientService.registerPatient(this.patientRegForm.value).then(data => {\r\n      response = data;\r\n      if(response.msg_status==200){\r\n        \r\n      }\r\n      else{\r\n        this.registerButtonActive = true;\r\n        this.loaderActive = false;\r\n      }\r\n     },\r\n       error => {\r\n         console.log(\"There is some error on submitting...\");\r\n     });\r\n\r\n  }\r\n\r\n\r\n\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PatientregRoutingModule } from './patientreg-routing.module';\nimport { PatientregComponent } from './patientreg.component';\nimport { AppMaterialModule } from '../../app-material/app-material.module';\nimport { FormsModule ,ReactiveFormsModule } from '@angular/forms';\n\n\n\n\n\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PatientregRoutingModule,\n    AppMaterialModule,\n    FormsModule,\n    ReactiveFormsModule\n    \n  ],\n \n  declarations: [PatientregComponent]\n})\nexport class PatientregModule { }\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { GlobalconstantService } from './globalconstant.service';\r\nimport { Observable }     from 'rxjs/Observable';\r\n\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/operator/map';\r\n\r\n\r\nexport class PatientsCls {\r\n  public patient_name: string;\r\n  public patient_code: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PatientService {\r\n\r\n  constructor(public http: HttpClient,private global:GlobalconstantService) {\r\n\r\n   }\r\n   GetPatientListAll(){\r\n    return this.http.get(this.global.ListPatient);\r\n    }\r\n\r\n\r\n    getPatientList(){\r\n  \r\n    \r\n       return new Promise(resolve => {\r\n          this.http.get(this.global.ListPatient).subscribe(data => {\r\n            resolve(data);\r\n           \r\n          }, err => {\r\n            console.log(err);\r\n          });\r\n        });\r\n    }\r\n\r\n    getPatientLists(hospitalid){\r\n      let myData = JSON.stringify({hospital_id: hospitalid});\r\n       return new Promise(resolve => {\r\n          this.http.post(this.global.ListPatient,myData).subscribe(data => {\r\n            resolve(data);\r\n           \r\n          }, err => {\r\n            console.log(err);\r\n          });\r\n        });\r\n      \r\n    }\r\n\r\n    getPatientDetailById(patientid){\r\n      let hospitalid = 1; // will come from global file // need to change\r\n      let myData = JSON.stringify({hospital_id: hospitalid,patient_id:patientid});\r\n       return new Promise(resolve => {\r\n          this.http.post(this.global.patientdetail_URL,myData).subscribe(data => {\r\n            resolve(data);\r\n           \r\n          }, err => {\r\n            console.log(err);\r\n          });\r\n        });\r\n      \r\n    }\r\n\r\n    getPatientByCode(pcode){\r\n      let myData = JSON.stringify({pcode: pcode});\r\n       return new Promise(resolve => {\r\n          this.http.post(this.global.patientPrescInfoBycode_URL,myData).subscribe(data => {\r\n            resolve(data);\r\n           \r\n          }, err => {\r\n            console.log(err);\r\n          });\r\n        });\r\n      \r\n    }\r\n\r\n\r\n\r\n    registerPatient(formValue){\r\n      let hospitalid = 1; // will come from global file // need to change\r\n      let myData = JSON.stringify({hospital_id: hospitalid,values:formValue});\r\n       return new Promise(resolve => {\r\n          this.http.post(this.global.registerPatient_URL,myData).subscribe(data => {\r\n            resolve(data);\r\n           \r\n          }, err => {\r\n            console.log(err);\r\n          });\r\n        });\r\n    }\r\n\r\n    addNewPatient(formValue){\r\n    \r\n      let myData = JSON.stringify({values:formValue});\r\n       return new Promise(resolve => {\r\n          this.http.post(this.global.addnewPatient_URL,myData).subscribe(data => {\r\n            resolve(data);\r\n           \r\n          }, err => {\r\n            console.log(err);\r\n          });\r\n        });\r\n    }\r\n\r\n    searchPatient(formValue,serachtype){\r\n      let hospitalid = 1; // will come from global file // need to change\r\n      let myData = JSON.stringify({hospital_id: hospitalid,values:formValue,stype:serachtype});\r\n       return new Promise(resolve => {\r\n          this.http.post(this.global.searchPatient_URL,myData).subscribe(data => {\r\n            resolve(data);\r\n          }, err => {\r\n            console.log(err);\r\n          });\r\n        });\r\n    }\r\n\r\n\r\n    checkIsRegisteredToday(formValue,serachtype){\r\n      let myData = JSON.stringify({values:formValue,stype:serachtype});\r\n      return new Promise(resolve => {\r\n         this.http.post(this.global.isregisterdToday_URL,myData).subscribe(data => {\r\n           resolve(data);\r\n          \r\n         }, err => {\r\n           console.log(err);\r\n         });\r\n       });\r\n    }\r\n\r\n\r\n    getPatientInfoByCode(pcode){\r\n      let myData = JSON.stringify({pcode: pcode});\r\n       return new Promise(resolve => {\r\n          this.http.post(this.global.patientInfoBycode_URL,myData).subscribe(data => {\r\n            resolve(data);\r\n           \r\n          }, err => {\r\n            console.log(err);\r\n          });\r\n        });\r\n      \r\n    }\r\n\r\n   \r\n}\r\n"],"sourceRoot":""}